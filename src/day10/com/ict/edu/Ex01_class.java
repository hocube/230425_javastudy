package day10.com.ict.edu;

import java.util.Scanner;

public class Ex01_class {
	/*
	 * 클래스
	 * 자바에서의 클래스는 객체(Object)를 정의하는 틀 또는 설계도면과 같은 의미로 사용 됨.
	 * 객체란 클래스를 바탕으로 생성된 것을 객체라고 한다.
	 * 
	 * 클래스가 가지고 있는 것 : 데이터 = 멤버필드 (변수, 상수)
	 *                     기능  = 동작 = 멤버 메서드
	 *                     생성자 = 클래스가 객체로 만들어질 때 한번 호출되서 데이터를 초기화 할 수 있는 것
	 *                     ** 클래스 이름 = 저장 이름 = 파일 이름 = 생성자 이름 
	 * 					  
	 * 클래스 구조 : 헤더, 멤버 필드, 생성자, 멤버 메서드
	 * 1. 헤더 : [접근 제한자] [클래스 종류에 대한 예약어] class 클래스 이름 {        }
	 * 	1) 접근 제한자 : 클래스, 멤버 필드, 멤버 메서드, 생성자 모두 사용할  수 있다.
	 * 				  외부에서 접근할 수 있는 권한의 단계를 말 한다.
	 * 		1-1. public : 누구나 다 접근 가능
     * 		1-2. protected : 같은 패키지와 상속 관계에서는 접근 가능
     *		1-3. 생략(default) : 같은 패키지에서만 접근 가능
     *		1-4. private : 외부에서는 접근 불가, 내부 멤버(멤버 필드, 멤버 메서드)끼리만 접근 가능
     *
     *  2) **클래스 종류에 대한 예약어** : 일반적인 클래스 생략한다.
	 *		 특정 클래스에 해당하는 예약어가 존재한다. (final, abstract……)
	 *
	 *  3) class : 클래스임을 나타내는 예약어
	 *
     *  4) 클래스 이름 : 클래스 이름 = 저장 이름 = 파일 이름 = 생성자 이름
	 * 				  첫 글자 대문자, 나머지는 소문자
	 * 				  두 단어 이상일 때는 단어 첫 글자들은 대문자
	 * 				  숫자는 중간이나 뒤에 사용, 공백은 사용 불가
	 * 
	 * 2. 멤버 필드 : 데이터, 상태 값, 속성
	 *   1) 변수 : 언제든지 변할 수 있는 데이터를 저장하는 공간
	 *		      첫 글자 소문자, 두 단어 이상일 때 단어 첫 글자들은 대문자
     *			  숫자는 중간이나 뒤에 사용, 공백은 사용 불가
     *   2) 상수 : 한번 데이터가 저장되면 변경할 수 없는 데이터를 저장하는 공간
     *			  모든 글자가 다 대문자, 단어와 단어 사이에 _(언더바)를 사용할 수 있다.
     *
     *	3. 멤버 메서드 : 동작, 기능, 실행
     * 				  해당 메서드를 호출(실행)하면 해당 메서드 안에 존재한 내용이 실행됨.
     * 				  호출해서 내용이 실행된 후에는 호출한 곳으로 되돌아 간다.
     * 				  메서드는 다른 메서드를 호출할 수 있다.
     *    1)구성 : [접근 제한자] [메서드 종류] 반환형 메서드 이름( 인자(=매개변수) ) {   실행할 내용  }
     *     	 1-1. 접근 제한자 : public, protected, 생략, private;
     *       1-2. 메서드 종류 : 일반 메서드 이부분을 생략한다
     *       				 특정 메서드에 해당하는 예약어를 사용 (static)
     *       1-3 ★반환형 : 해다 메서드가 실행이 끝나면 호출한 곳으로 되돌아 갈 때
     * 					 함께 가지고 가는 결과의 자료형
     * 					 만약에 결과를 가지고 가지 않으면 void라는 예약어를 사용 한다.
     *    2) 메서드 이름 : 변수와 같음, 첫 글자 소문자, 두 단어 이상일 때 단어 첫 글자들은 대문자
     *    				숫자는 중간이나 뒤에 사용, 공백은 사용 불가
     *    3) ★인자 = 매개변수 : 보통은 실행할 때 필요한 정보를 외부에서 받기 위한 통로
     *    				   생략 가능하고, 여러 개 사용 가능
     *    4) ★오버로딩(중복 정의) : 메서드 이름이 같으나 인자 수나 인자 자료형이 다른 메서드로 판단한다.
     *     			           즉, 인자의 수나 자료형이 다르면 같은 이름의 메서드가 여러 개 존재할 수 있다.
     *    					  *변수는 이름이 같으면 중복된다. 메소드는 아님!
     *    5) ★getter( ) : 호출하는 입장에서 메서드를 이용해서 정보를 가져오는 메서드
	 *       ★setter( ) : 호출하는 입장에서 메서드를 이용해서 정보를 변경하는 메서드
	 * 				변수가 private 이면 직접 접근을 할 수 없다. 그래서! getter/setter을 이용해서 접근한다.
	 *  4. 생성자 : 클래스가 객체로 만들어질 때 한번 호출 된다.
	 *    1) 목적 : 멤버 필드 (변수, 상수)의 초기값을 지정하는 것이 목적이다.
	 *    2) 형식 : 클래스 이름과 생성자 이름을 같다.
	 *    		   반환형이 없는 메서드의 형태이다.
	 *    		   [접근 제한자] 생성자(클래스 이름) ([인자]) { 실행 내용 }
	 *  	  	   인자가 없는 생성자를 기본 생성자라고 한다.
	 *  		   생성자 오버 로딩 가능
     * 			   하나의 클래스의 여러 개의 생성자가 존재할 수 있다. =생성자 오버 로딩
     *   3) 클래스를 이용해서 객체 만들 때 생성자 호출
	 *      Scanner     scan       =       new          Scanner(System.in);
	 *       클래스       참조변수      =     new 예약어              생성자
     *     
     *     new 예약어를 사용하면 무조건 heap 메모리에 사용 영역(저장 영역)을 만든다.
     *     
     *     
     *  5. 클래스를 객체로 만든 후 멤버 필드와 멤버 메서드에게 접근하는 방법
     * 	   참조 변수.멤버 필드,   참조 변수.멤버 메서드(),   (단, 접근 제한자를 확인) 
     * 
     *  6. static과 instance
 	 * 		1) instance(인스턴스) 필드, 메서드 : 
	 *			- 객체가 생성될 때 같이 생성되는 필드와 메서드 
 	 *			- 일반적인 클래스의 멤버 필드나 멤버 메서드는 모두 인스턴스이다.
 	 * 		호출 방법 ; 객체 생성한 다음에 호출
 	 * 				 참조 변수.멤버 필드,  참조 변수.멤버 메서드
 	 * 				 Scanner scan = new Scanner(System.in);
 	 * 				 scan.nextInt();
 	 *				 heap 메모리에 만들어진다.
 	 *		2) static
	 *			- 객체 생성과 상관없이 미리 만들어진 멤버 필드와 멤버 메서드
	 *			- 반드시 static이라는 예약어를 사용
	 *			- 객체 생성과 상관 없이 언제든 호출 가능
	 *		호출 방법 ; 클래스 이름.멤버 필드, 클래스 이름.멤버 메서드
	 *				 System.out.
	 *          - static 메모리에 만들어진다.(공용)
     *    
     * public static void main(
	 */
	}
	
